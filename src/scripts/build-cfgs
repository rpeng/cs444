#!/usr/bin/env python
import glob
import sys


ACCEPTED_STATES = ['terminals', 'start_symbol', 'nonterminals', 'rules',
                   'skip']


def _err(reason):
    print >> sys.stderr, reason
    sys.exit(1)


def Main(paths, output_path):
    state = None  # terminals, start_symbol, nonterminals, rules, skip

    result = {
        'terminals': [],
        'nonterminals': [],
        'rules': [],
        'start_symbol': None
    }

    # Grab all the inputs
    for script in paths:
        state = None
        with open(script) as f:
            for raw_line in f:
                line = raw_line.strip()
                if not line or line.startswith('#'):
                    continue
                elif line.startswith('{{'):
                    new_state = line[2:-2]
                    if new_state not in ACCEPTED_STATES:
                        _err('Invalid tag '+new_state)
                    if state == 'skip':
                        break
                    state = new_state
                elif state is None:
                    _err('Missing start tag before '+line)
                elif state == 'terminals':
                    if (line in result['terminals'] or line in
                            result['nonterminals']):
                        _err('Duplicate token ' + line)
                    result['terminals'].append(line)
                elif state == 'start_symbol':
                    if result['start_symbol'] is not None:
                        _err('Start symbol already read')
                    result['start_symbol'] = line
                elif state == 'nonterminals':
                    if (line in result['terminals'] or line in
                            result['nonterminals']):
                        _err('Duplicate token ' + line)
                    result['nonterminals'].append(line)
                elif state == 'rules':
                    left, right = line.split('->', 1)
                    left = left.strip()
                    right = [x.strip() for x in right.split(' ') if x]
                    result['rules'].append((left, right))

    # sanity check
    if result['start_symbol'] is None:
        _err('You need a start symbol!')

    # expand optionals
    optionals = []
    for lhs, rhs in result['rules']:
        for token in rhs:
            if token.endswith('?'):
                optionals.append((lhs, rhs))
                break

    for lhs, rhs in optionals:
        result['rules'].remove((lhs, rhs))
        worklist = [rhs]
        while worklist:
            item = worklist.pop()
            has_optional = False
            for i, t in enumerate(item):
                if t.endswith('?'):
                    has_optional = True
                    if i == 0:
                        worklist.append(item[1:])
                        worklist.append([t[:-1]] + item[1:])
                    else:
                        worklist.append(item[0:i] + item[i+1:])
                        worklist.append(item[0:i] + [t[:-1]] + item[i+1:])
            if not has_optional:
                if (lhs, item) not in result['rules']:
                    result['rules'].append((lhs, item))

    # make sure lhs are all nonterminals
    for (lhs, rhs) in result['rules']:
        if lhs not in result['nonterminals']:
            _err('You need non terminal LHS in your rule: {} -> {}'.format(
                lhs, ' '.join(rhs)))
        for symbol in rhs:
            if (symbol not in result['terminals']
                    and symbol not in result['nonterminals']):
                _err('Your rhs must be a valid terminal or non terminal: '
                     + ' '.join(rhs))

    # output
    with open(output_path, 'w') as f:
        f.write('{}\n'.format(len(result['terminals'])))
        for terminal in result['terminals']:
            f.write(terminal + '\n')
        f.write('{}\n'.format(len(result['nonterminals'])))
        for nonterminal in result['nonterminals']:
            f.write(nonterminal + '\n')
        f.write('{}\n'.format(result['start_symbol']))
        f.write('{}\n'.format(len(result['rules'])))
        for lhs, rhs in result['rules']:
            if not rhs:
                f.write(lhs + '\n')
            else:
                f.write('{} {}\n'.format(lhs, ' '.join(rhs)))

if __name__ == '__main__':
    if len(sys.argv) < 3:
        print "Usage: build-cfgs [path-to-cfg...] [output-path]"
    else:
        paths = sys.argv[1:-1]
        output = sys.argv[-1]
        Main(paths, output)
