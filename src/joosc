#!/usr/bin/python
from multiprocessing.pool import Pool
import sys

from joos.errors import JoosError
from joos.lex import (ScanInput, PrepareTokens, Parse)
from joos.compiler import *


JOOS_CACHE = 'generated/joos.cache'
JOOS_LR1_FILE = 'generated/joos.lr1'


def ProcessFile(input_file):
    with open(input_file) as f:
        tokens = ScanInput(f.read())
        tokens = PrepareTokens(tokens, input_file)
        parse_tree = Parse(tokens, JOOS_LR1_FILE)
        ast = BuildAST(parse_tree)
        WeedAST(ast, input_file)
        BuildEnv(ast)
        return ast


def ProcessFiles(input_files):
    units = []
    for file in input_files:
        units.append(ProcessFile(file))
    return units


def MultiProcessFiles(input_files):
    pool = Pool(processes=4)
    units = pool.map(ProcessFile, input_files)
    return units


def Main(input_files):
    try:
        units = MultiProcessFiles(input_files)
        app = LinkTypes(units)
        CheckHierarchy(app)
        LinkNames(app)
        CheckTypes(app)
    except JoosError, e:
        print >> sys.stderr, str(e)
        sys.exit(42)


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print "Usage: joosc [input_files...]"
    else:
        Main(sys.argv[1:])
